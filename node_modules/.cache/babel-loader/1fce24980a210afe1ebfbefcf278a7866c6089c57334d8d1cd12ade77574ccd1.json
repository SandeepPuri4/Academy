{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFormData, resetFormData, closeForm } from '../store/formSlice';\nexport default function Form() {\n  _s();\n  const dispatch = useDispatch();\n  const formData = useSelector(state => state.form.formData);\n  const isOpen = useSelector(state => state.form.isOpen);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    dispatch(updateFormData({\n      [name]: value\n    }));\n  };\n  const submitData = async event => {\n    event.preventDefault();\n    const {\n      name,\n      contact,\n      email,\n      description\n    } = formData;\n    if (name && contact && email && description) {\n      try {\n        const res = await fetch('https://practice-c217b-default-rtdb.firebaseio.com/contacts.json', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name,\n            email,\n            contact,\n            description\n          })\n        });\n        if (res.ok) {\n          dispatch(resetFormData());\n          alert('Data Stored');\n          dispatch(closeForm());\n        } else {\n          alert('Failed to store data');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        alert('Error submitting form, please try again.');\n      }\n    } else {\n      alert('Please fill in all the data');\n    }\n  };\n  if (!isOpen) return null;\n  return;\n}\n_s(Form, \"ZUNI7LOdZOqMnOHsM669uWO2Gqw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useDispatch","useSelector","updateFormData","resetFormData","closeForm","Form","_s","dispatch","formData","state","form","isOpen","handleChange","e","name","value","target","submitData","event","preventDefault","contact","email","description","res","fetch","method","headers","body","JSON","stringify","ok","alert","error","console","_c","$RefreshReg$"],"sources":["C:/Users/sndpp/Desktop/react-practice/router_2/src/components/Form.js"],"sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateFormData, resetFormData, closeForm } from '../store/formSlice';\r\n\r\nexport default function Form() {\r\n  const dispatch = useDispatch();\r\n  const formData = useSelector((state) => state.form.formData);\r\n  const isOpen = useSelector((state) => state.form.isOpen);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    dispatch(updateFormData({ [name]: value }));\r\n  };\r\n\r\n  const submitData = async (event) => {\r\n    event.preventDefault();\r\n    const { name, contact, email, description } = formData;\r\n\r\n    if (name && contact && email && description) {\r\n      try {\r\n        const res = await fetch(\r\n          'https://practice-c217b-default-rtdb.firebaseio.com/contacts.json',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              name,\r\n              email,\r\n              contact,\r\n              description,\r\n            }),\r\n          }\r\n        );\r\n\r\n        if (res.ok) {\r\n          dispatch(resetFormData());\r\n          alert('Data Stored');\r\n          dispatch(closeForm());\r\n        } else {\r\n          alert('Failed to store data');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        alert('Error submitting form, please try again.');\r\n      }\r\n    } else {\r\n      alert('Please fill in all the data');\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return \r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,EAAEC,aAAa,EAAEC,SAAS,QAAQ,oBAAoB;AAE7E,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,QAAQ,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;EAC5D,MAAMG,MAAM,GAAGV,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC;EAExD,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCT,QAAQ,CAACL,cAAc,CAAC;MAAE,CAACY,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EAC7C,CAAC;EAED,MAAME,UAAU,GAAG,MAAOC,KAAK,IAAK;IAClCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAM;MAAEL,IAAI;MAAEM,OAAO;MAAEC,KAAK;MAAEC;IAAY,CAAC,GAAGd,QAAQ;IAEtD,IAAIM,IAAI,IAAIM,OAAO,IAAIC,KAAK,IAAIC,WAAW,EAAE;MAC3C,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,kEAAkE,EAClE;UACEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBf,IAAI;YACJO,KAAK;YACLD,OAAO;YACPE;UACF,CAAC;QACH,CACF,CAAC;QAED,IAAIC,GAAG,CAACO,EAAE,EAAE;UACVvB,QAAQ,CAACJ,aAAa,CAAC,CAAC,CAAC;UACzB4B,KAAK,CAAC,aAAa,CAAC;UACpBxB,QAAQ,CAACH,SAAS,CAAC,CAAC,CAAC;QACvB,CAAC,MAAM;UACL2B,KAAK,CAAC,sBAAsB,CAAC;QAC/B;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BD,KAAK,CAAC,0CAA0C,CAAC;MACnD;IACF,CAAC,MAAM;MACLA,KAAK,CAAC,6BAA6B,CAAC;IACtC;EACF,CAAC;EAED,IAAI,CAACpB,MAAM,EAAE,OAAO,IAAI;EAExB;AACF;AAACL,EAAA,CAnDuBD,IAAI;EAAA,QACTL,WAAW,EACXC,WAAW,EACbA,WAAW;AAAA;AAAAiC,EAAA,GAHJ7B,IAAI;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}